version: '3'

networks:
  admin:
    driver: overlay
  front:
    driver: overlay

services:
  registry:
    image: registry:2
    deploy:
      placement:
        constraints:
        - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 2s
    networks:
    - front
    ports:
    - "5001:5000"

  lb:
    image: traefik:1.3.0
    deploy:
      placement:
        constraints:
        - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 2s
    networks:
    - front
    command: --docker --docker.swarmmode --docker.domain=${EXTERNAL_DOMAIN} --docker.watch --web
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
    ports:
    - "10000:80"
    - "8081:8080"

  # cadvisor:
  #   image: google/cadvisor:v0.25.0
  #   networks:
  #   - monitoring
  #   labels:
  #     com.docker.stack.namespace: monitoring
  #   volumes:
  #   - "/:/rootfs:ro"
  #   - "/var/run:/var/run:rw"
  #   - "/sys:/sys:ro"
  #   - "/var/lib/docker:/var/lib/docker:ro"
  #   deploy:
  #     mode: global
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 3
  #       window: 2s
  #     labels:
  #       com.docker.stack.namespace: monitoring
  #
  # node-exporter:
  #   image: basi/node-exporter:v1.14.0
  #   command:
  #   - '-collector.procfs=/host/proc'
  #   - '-collector.sysfs=/host/sys'
  #   - '-collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
  #   - '-collector.textfile.directory=/etc/node-exporter/'
  #   - 'collectors.enabled="conntrack,diskstats,entropy,filefd,filesystem,loadavg,mdadm,meminfo,netdev,netstat,stat,textfile,time,vmstat,ipvs"'
  #   - 'collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)"'
  #   networks:
  #   - monitoring
  #   labels:
  #     com.docker.stack.namespace: monitoring
  #   volumes:
  #   - /proc:/host/proc
  #   - /sys:/host/sys
  #   - /:/rootfs
  #   - /etc/hostname:/etc/host_hostname
  #   environment:
  #   - "HOST_HOSTNAME=/etc/host_hostname"
  #   deploy:
  #     mode: global
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 3
  #       window: 2s
  #     labels:
  #       com.docker.stack.namespace: monitoring
  #
  # prometheus:
  #   image: basi/prometheus-swarm:v0.3.1
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 3
  #       window: 2s
  #     labels:
  #       com.docker.stack.namespace: monitoring
  #   networks:
  #   - monitoring
  #   labels:
  #     com.docker.stack.namespace: monitoring
  #   ports:
  #   - "9090:9090"
  #   command:
  #   - '-config.file=/etc/prometheus/prometheus.yml'
  #   - '-storage.local.path=/prometheus'
  #   - '-web.console.libraries=/etc/prometheus/console_libraries'
  #   - '-web.console.templates=/etc/prometheus/consoles'
  #
  # grafana:
  #   image: basi/grafana:v4.1.1
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  #       max_attempts: 3
  #       window: 2s
  #     labels:
  #       com.docker.stack.namespace: monitoring
  #   networks:
  #   - monitoring
  #   ports:
  #   - "3000:3000"
  #   environment:
  #   - "GF_SERVER_ROOT_URL=http://grafana.${CLUSTER_DOMAIN}"
  #   - "GF_SECURITY_ADMIN_PASSWORD=$GF_PASSWORD"
  #   - "PROMETHEUS_ENDPOINT=http://prometheus:9090"
  #   - "ELASTICSEARCH_ENDPOINT=$ES_ADDRESS"
  #   - "ELASTICSEARCH_USER=$ES_USERNAME"
  #   - "ELASTICSEARCH_PASSWORD=$ES_PASSWORD"


  visualizer:
    image: dockersamples/visualizer
    deploy:
      placement:
        constraints:
        - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3
        window: 2s
    networks:
    - admin
    ports:
    - "8080:8080"
    environment:
    - HOST=${EXTERNAL_DOMAIN}
    - PORT=8080
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
